<?php

/**
 * @file
 * Primary hook implementations.
 */

// Permissions.
define('ISLANDORA_MEMBEROFSITE_MANAGE', 'manage ismemberofsite');

/**
 * Implements hook_menu().
 */
function islandora_memberofsite_menu() {
  $items = array(
    'admin/islandora/tools/islandora_memberofsite' => array(
      'title' => 'IsMemberOfSite Settings',
      'description' => 'Change the available Sites for adding IsMemberOfSite tags to object models.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_memberofsite_admin_form'),
      'access arguments' => array(ISLANDORA_MEMBEROFSITE_MANAGE),
      'file' => 'includes/admin.form.inc',
    ),
    'islandora/object/%islandora_object/manage/collection/memberofsite/%/%/remove' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_memberofsite_memberofsite_remove',
        2, 6, 7),
      'type' => MENU_CALLBACK,
      'file' => 'includes/memberofsite.form.inc',
      'access arguments' => array(ISLANDORA_MEMBEROFSITE_MANAGE),
    ),
    'islandora/object/%islandora_object/manage/collection/memberofsite/add' => array(
      'title' => 'Add isMemberOfSite to this Collection',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_memberofsite_memberofsite_add', 2),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'includes/memberofsite.form.inc',
      'access arguments' => array(ISLANDORA_MEMBEROFSITE_MANAGE),
    ),
  );

  return $items;
}

/**
 * Implements hook_islandora_overview_object_alter().
 *
 * Shows the collection usage stats on the object overview tab if allowed.
 */
function islandora_memberofsite_islandora_overview_object_alter(
  AbstractObject &$object, &$output) {
  module_load_include('inc', 'islandora_memberofsite', 'includes/utilities');
  if (!user_access(ISLANDORA_MEMBEROFSITE_MANAGE)) {
    return;
  }
  $sites = islandora_memberofsite_get_sites();    
  $obj_sites = $object->relationships->get(NULL, 'isMemberOfSite');
  $rows = array();
  islandora_memberofsite_fix_relationships($object, $obj_sites);
  foreach ($obj_sites as $obj_site) {
    $site_pid = $obj_site['object']['value'];
    if (array_key_exists($site_pid, $sites)) {
      $site_text = '<b>' . $sites[$site_pid]['label'] . '</b>';
      $rows[] = array($site_text,
        // TODO: determine if the url can be pulled from solr/sparql and if its necessary 
        // (($site_url) ? l($object->id, $site_url . '/islandora/object/' . $object->id) : 'n/a'),
        'n/a',
        l(t('Remove'), "islandora/object/{$object->id}/manage/collection/memberofsite/" . urlencode($obj_site['predicate']['namespace']) . "/" . urlencode($obj_site['object']['value']) . "/remove"),);
    }
  }
  $header = array('Site', 'Link', 'OPERATIONS');
  $attributes = array();
  $is_collection_object = islandora_memberofsite_is_collection_object($object);

  // Add isMemberOfSite to this Collection.
  $add_isMemberOfSite_link = array(
    'element' => array(
      '#link' => array(
        'href' => "islandora/object/{$object->id}/manage/collection/memberofsite/add",
        'title' => 'Add isMemberOfSite to this ' . (($is_collection_object) ? 'Collection' : 'Object'),
      ),
    ),
  );

  $output['islandora_memberofsite_sites'] = array(
    '#type' => 'item',
    '#title' => 'Member Of Site',
    '#markup' => '<ul class="action-links">' .
    theme_menu_local_action($add_isMemberOfSite_link) .
    '</ul>' .
    ((count($rows) > 0) ?
      theme('table', array('header' => $header, 'rows' => $rows)) : ''),
  );
}

/**
 * Implements hook_permission().
 */
function islandora_memberofsite_permission() {
  return array(
    ISLANDORA_MEMBEROFSITE_MANAGE => array(
      'title' => t('Manage isMemberOfSite relationships'),
      'description' => t('Manage isMemberOfSite relationships for collection objects in the repository.'),
    ),
  );
}

/**
 * Implements hook_islandora_object_access.
 */
function islandora_memberofsite_islandora_object_access($op, $object, $user) {
  $sites = explode("\r\n", variable_get('islandora_memberofsite_sites'));
  $obj_sites = $object->relationships->get(NULL, 'isMemberOfSite');
  foreach ($sites as $site_pid) {
    foreach ($obj_sites as $obj_site) {
      if ($obj_site['object']['value'] == $site_pid) {
        return true;
      }
    }
  }
  $page_rels = $object->relationships->get(NULL, 'isPageOf');
  foreach ($page_rels as $page_rel) {
    $page_owner = $object->repository->getObject($page_rel['object']['value']);
    $page_owner_sites = $page_owner->relationships->get(NULL, 'isMemberOfSite');
    foreach ($sites as $site_pid) {
      foreach ($page_owner_sites as $obj_site) {
        if ($obj_site['object']['value'] == $site_pid) {
          return true;
        }
      }
    }
  }
  return false;
}